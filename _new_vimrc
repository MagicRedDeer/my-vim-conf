"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  Pre                                    "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" At Start {{{
set nocompatible

" Read Local Settings {{{
let $LOCALPRE = expand('~/_local_pre.vim')
if filereadable($LOCALPRE)
    source $LOCALPRE
endif
" }}}

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Functions                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Functions {{{

" filetype dependent indent and folding settings {{{

function! Set_YAML_Settings()
    setlocal foldignore=#

    setlocal tabstop=2
    setlocal expandtab
    setlocal softtabstop=2
    setlocal shiftwidth=2
    setlocal textwidth=79
    setlocal autoindent

    setlocal shiftround
endfunction

function! Set_Python_Settings()
    " code folding settings
    "setlocal foldmethod=indent
    "setlocal foldcolumn=1
    setlocal foldignore=

    "pep8 settings
    setlocal tabstop=4
    setlocal expandtab
    setlocal softtabstop=4
    setlocal shiftwidth=4
    setlocal textwidth=79
    setlocal autoindent

    setlocal shiftround
endfunction

function! Set_Vim_Settings()
    setlocal foldmethod=marker
    setlocal foldmarker={{{,}}}

    setlocal tabstop=4
    setlocal expandtab
    setlocal softtabstop=4
    setlocal shiftwidth=4
    setlocal textwidth=79
    setlocal autoindent
endfunction

function! Set_JS_Settings()
    " code folding settings
    setlocal foldmethod=marker
    setlocal foldmarker={,}

    setlocal tabstop=4
    setlocal expandtab
    setlocal softtabstop=4
    setlocal shiftwidth=4
    setlocal textwidth&
    setlocal autoindent
endfunction

function! Set_ML_Settings()
    " code folding settings
    "setlocal foldmethod=marker
    "setlocal foldmarker={,}

    setlocal tabstop=4
    setlocal expandtab
    setlocal softtabstop=4
    setlocal shiftwidth=4
    setlocal textwidth=0
    setlocal autoindent
endfunction

function! Set_Mel_Settings()
    " code folding settings
    setlocal foldmethod=marker
    setlocal foldmarker={,}

    setlocal tabstop=4
    setlocal noexpandtab
    setlocal softtabstop=4
    setlocal shiftwidth=4
    setlocal textwidth=79
    setlocal autoindent
endfunction
" }}}

function! EscapePath(path, ...)

    let win32 = 1

    if a:0 > 0 
        if a:1 != 'win32'
            let win32 = 0
        endif
    elseif !has('win32')
        let win32 = 0
    endif

    if win32
        return ('"' . a:path . '"')
    else
        return substitute(a:path, ' ', '\\ ', '')
    endif

endfunction

function! IndentationFixer(from, tonum)
    let from = a:from+0
    let tonum = a:tonum+0

    let &l:sw=from
    let &l:sts=from
    let &l:ts=from
    let &l:et=0
    retab!

    let &l:sw=tonum
    let &l:sts=tonum
    let &l:ts=tonum
    let &l:et=1
    retab!
endfunction

" Refreshing {{{
function! RefreshCurrentBuffer()
    let k = &l:buftype
    if k==''
        execute 'e!'
    endif
endfun

function! RefreshAllBuffers()
    let bn = bufnr('%')
    set noconfirm
    bufdo call RefreshCurrentBuffer()
    set confirm
    execute 'b ' . bn
    syn on
endfun
" }}}

" Assigning diff expression for GNU diff utils {{{
if has('win32')
  set diffexpr=MyDiff()
  function! MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let diff = '"C:\Program Files (x86)\GnuWin32\bin\diff.exe"'
    if &sh =~ '\<cmd'
      silent execute '!' . diff . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . ''
    else
      silent execute '!'. diff .' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
    endif
  endfunction
endif
"}}}

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Plugins                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" {{{

" Download VimPlug {{{
let g:freshPlugInstall = 0
let vimfiles_dir = ".vim"
let bundles_dir = expand("~/" . vimfiles_dir . "/bundle")

let plugfile=expand("~/" . vimfiles_dir . "/autoload/plug.vim")
if !filereadable(plugfile)
    echo "Installing vim-plug.."
    echo ""

    let mkdir_flags = " -p "
    let link_cmd =  "silent !ln " .  EscapePath(expand(bundles_dir .  "/vim-plug/plug.vim")) . " " .  EscapePath(expand("~/" . vimfiles_dir  .  "/autoload/plug.vim"))
    if has('win32')
        let mkdir_flags = ""
        let link_cmd = "silent !mklink /h " .  EscapePath(expand("~/" .  vimfiles_dir  .  "/autoload/plug.vim")) . " " .  EscapePath(expand(bundles_dir .  "/vim-plug/plug.vim"))
    endif

    execute "silent !mkdir " . mkdir_flags . EscapePath(bundles_dir)
    execute "silent !git clone https://github.com/junegunn/vim-plug " . EscapePath(bundles_dir . "/vim-plug")
    execute "silent !mkdir " . mkdir_flags . EscapePath(expand("~/" . vimfiles_dir . "/autoload"))
    execute link_cmd
    execute "silent source " . EscapePath(expand("~/" . vimfiles_dir . "/autoload/plug.vim"), '')

    let g:freshPlugInstall = 1
endif
" }}}

" Setup VimPlug {{{

set nocompatible
filetype off
execute "silent source " . EscapePath(expand("~/" . vimfiles_dir . "/autoload/plug.vim"), '')

call plug#begin(bundles_dir)

Plug 'junegunn/vim-plug'

"}}}

" Plugs {{{

"""""""""""""""
"  IDE Plugs  "
"""""""""""""""
" {{{
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'Valloric/YouCompleteMe'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'w0rp/ale'

" Session Management {{{
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
Plug 'mhinz/vim-startify'
" }}}

" Debugging {{{
Plug 'joonty/vdebug'
" }}}

" AutoClose and Jumping {{{
Plug 'vim-scripts/matchit.zip'
Plug 'cohama/lexima.vim'
" }}}

" C/C++ {{{
Plug 'derekwyatt/vim-fswitch'
Plug 'derekwyatt/vim-protodef'
Plug 'rhysd/vim-clang-format'
" }}}

" For Python {{{
Plug 'tmhedberg/SimpylFold'
Plug 'davidhalter/jedi-vim'
" }}}

"For SQL {{{
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-dadbod'
Plug 'vim-scripts/SQLUtilities'
Plug 'jonathanfilip/vim-dbext'
" }}}

"For HTML {{{
Plug 'mattn/emmet-vim'
Plug 'othree/html5.vim'
Plug 'valloric/MatchTagAlways'
Plug 'skammer/vim-css-color'
"}}}

" javascript specific {{{
Plug 'epilande/vim-es2015-snippets'
Plug 'epilande/vim-react-snippets'
Plug 'pangloss/vim-javascript'
Plug 'moll/vim-node'
Plug 'mxw/vim-jsx'
Plug 'ternjs/tern_for_vim', { 'do': 'npm install tern' }
" }}}

" PHP things {{{
Plug 'StanAngeloff/php.vim'
Plug 'docteurklein/php-getter-setter.vim'
Plug 'shawncplus/phpcomplete.vim'
Plug 'swekaj/php-foldexpr.vim'
Plug 'vim-php/vim-php-refactoring'
Plug 'vim-php/tagbar-phpctags.vim'
Plug 'vim-php/vim-create'
Plug 'vim-php/vim-composer'
Plug 'wdalmut/vim-phpunit'

Plug 'tobyS/vmustache'
Plug 'tobyS/pdv'

Plug 'dsawardekar/wordpress.vim'


Plug 'tyru/open-browser.vim'

"}}}

" Browser and Web {{{
Plug 'vim-scripts/WebAPI.vim'
Plug 'tyru/open-browser.vim'
" }}}

" C# and Unity {{{
Plug 'OmniSharp/omnisharp-vim'
Plug 'OrangeT/vim-csharp'
" }}}

" }}}

""""""""""""""""""""""
"  Vim Improvements  "
""""""""""""""""""""""
" {{{
" Visual Helpers
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'nathanaelkane/vim-indent-guides'

" Undos
Plug 'vim-scripts/Gundo'

" Behaviour Extensions
Plug 'vim-scripts/CompleteHelper'
Plug 'vim-scripts/CamelCaseComplete'
Plug 'bkad/CamelCaseMotion'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'

" Buffer Handling
Plug 'jlanzarotta/bufexplorer'
Plug 'qpkorr/vim-bufkill'
" }}}

" Text Objects {{{
Plug 'vim-scripts/argtextobj.vim'
Plug 'michaeljsmith/vim-indent-object'
" }}}

" ColorSchemes {{{
Plug 'vim-scripts/win9xblueback.vim'
Plug 'vim-scripts/darkblack.vim'
Plug 'vim-scripts/oceanblack.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'sjl/badwolf'
Plug 'jordwalke/flatlandia'
Plug 'morhetz/gruvbox'
Plug 'flazz/vim-colorschemes'
" }}}

"""""""""""""
"  Finders  "
"""""""""""""
" {{{
Plug 'Shougo/denite.nvim',  { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neomru.vim'
Plug 'Shougo/neoyank.vim'
Plug 'vim-scripts/EasyGrep'
" }}}

"""""""""""""""""""
"  Documentation  "
"""""""""""""""""""
" {{{

" Todo plugin {{{
Plug 'neochrome/todo.vim'
Plug 'vim-scripts/TaskList.vim'
" }}}

" Dating {{{
Plug 'tpope/vim-speeddating'
Plug 'mattn/calendar-vim'
" }}}

" Tables and SpreadSheets{{{
Plug 'godlygeek/tabular'
Plug 'chrisbra/csv.vim'
" }}}

" Literacy {{{
Plug 'LaTeX-Box-Team/LaTeX-Box'
Plug 'jceb/vim-orgmode'
Plug 'Rykka/os.vim'
Plug 'Rykka/riv.vim'
Plug 'vim-scripts/VisIncr'
Plug 'tpope/vim-markdown'
Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'
Plug 'jtratner/vim-flavored-markdown'
" }}}

" }}}

" }}}

" End VimPlug {{{

let $LPLUG = expand('~/_local_plug.vim')
if filereadable($LPLUG)
    source $LPLUG
endif

call plug#end()

if ( g:freshPlugInstall == 1)
    execute 'PlugInstall'
endif
" }}}

" Settings for Plugs {{{

" CamelCaseMotion Settings {{{
call camelcasemotion#CreateMotionMappings('<leader>')
"}}}

" lexima Settings {{{
let g:lexima_enable_basic_rules = 1
let g:lexima_enable_newline_rules = 0
let g:lexima_enable_endwise_rules = 0
" }}}

" UltiSnips Settings {{{
let g:UltiSnipsExpandTrigger = '<c-j>'
let g:UltiSnipsListSnippets = '<c-k>'
" }}}

" FSwitch mappings {{{
nmap <silent> <leader>of :FSHere<CR>
nmap <silent> <leader>ol :FSRight<CR>
nmap <silent> <leader>oL :FSSplitRight<CR>
nmap <silent> <leader>oh :FSLeft<CR>
nmap <silent> <leader>oH :FSSplitLeft<CR>
nmap <silent> <leader>ok :FSAbove<CR>
nmap <silent> <leader>oK :FSSplitAbove<CR>
nmap <silent> <leader>oj :FSBelow<CR>
nmap <silent> <leader>oJ :FSSplitBelow<CR>
" }}}

" Open Browser Settings {{{
let g:openbrowser_default_search = 'unity3d'
let g:openbrowser_search_engines = extend(
    \get(g:, 'openbrowser_search_engines', {}),
    \{
    \   'unity3d' : 'http://docs.unity3d.com/ScriptReference/30_search.html?q={query}'
    \})
" }}}

" Airline Settings {{{
let g:airline_theme='jellybeans'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'
" }}}

" Ale settings {{{
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_enter = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
let g:ali_lint_delay = 1000
let g:ale_linters = {
            \ 'php': ['phpmd', 'phpcs'],
            \ 'python': ['flake8'],
            \ 'javascript': ['eslint'],
            \ }
let g:ale_fixers = {
            \ 'python': ['autopep8', 'yapf'],
            \ 'javascript': ['eslint']
            \ }
let g:ale_php_phpmd_ruleset = 'cleancode'
" }}}

" Settings for Easy Grep {{{
let EasyGrepWindow = 0
let EasyGrepMode = 1
" }}}

" Jedi Settings {{{
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#auto_close_doc = 0
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = 0
let g:jedi#force_py_version = 2
" }}}

" YCM Settings {{{
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_auto_trigger = 1

" let g:ycm_key_invoke_completion = '<c-Tab>'
let g:ycm_key_list_select_completion = ['<tab>', '<up>']
"let g:ycm_key_list_previous_completion = ['<s-tab>']
"
let g:ycm_extra_conf_globlist = ['~/rdev/cpp/*']

" Disable for latex
let g:ycm_filetype_blacklist = {
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'text' : 1,
      \ 'tex' : 1,
      \}
" YCM mappings {{{
nmap <leader>yy :YcmForceCompileAndDiagnostics<cr>
nmap <leader>yg :YcmCompleter GoToDefinitionElseDeclaration<cr>
nmap <leader>yd :YcmCompleter GoToDefinition<cr>
nmap <leader>yc :YcmCompleter GoToDeclaration<cr>
nmap <leader>yt :YcmCompleter GetType<cr>
" }}}
" }}}

" SpeedDating Settings {{{
if !exists("g:speeddating_no_mappings") || !g:speeddating_no_mappings
  nmap  <M-u>     <Plug>SpeedDatingUp
  nmap  <M-d>     <Plug>SpeedDatingDown
  xmap  <M-u>     <Plug>SpeedDatingUp
  xmap  <M-d>     <Plug>SpeedDatingDown
  nmap d<M-u>     <Plug>SpeedDatingNowUTC
  nmap d<M-d>     <Plug>SpeedDatingNowLocal
  let g:speeddating_no_mappings = 1
endif
" }}}

" SQL Plug Settings {{{
let g:dadbod_manage_dbext = 1
let g:dbext_default_SQLSRV_bin = 'sqlcmd'
let g:dbext_default_SQLSRV_cmd_options = '-w 10000 -r -b '
" }}}

" Settings for Easy Grep {{{
let EasyGrepWindow = 0
let EasyGrepMode = 1
" }}}

" Session Management Settings {{{
let g:session_directory = expand('~/' . vimfiles_dir . '/sessions')
let g:session_autosave = 'no'
let g:startify_session_dir= g:session_directory
let g:session_autoload = "no"
let g:session_autosave = "no"
let g:session_command_aliases = 1
" }}}

" Latex Box Settings {{{
let g:LatexBox_viewer = 'zathura'
let g:LatexBox_latexmk_options = '-pvc -pdflatex="pdflatex -shell-escape"'
" }}}

" Todo Plugin Settings {{{
" todo.vim default highlight groups, feel free to override as wanted
hi link todotitle title
hi link todotitlemark normal
hi link todoitem special
hi link todoitemadditionaltext comment
hi link todoitemcheckbox identifier
hi link todoitemdone ignore
hi link todocomment comment

" define like this to enable explicit comments
" comments then start with //
let g:todoexplicitcommentsenabled = 1
" }}}

" HTML MatchTagAlways Settings {{{
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'javascript.jsx': 1
    \}
" }}}

" JSX Settings {{{
let g:jsx_ext_required = 0 " Allow JSX in normal JS files
if has('win32')
    let $PATH='C:\Program Files\nodejs\;' . $PATH
    let $PATH='C:\Program Files\nodejs\node_modules\.bin;' . $PATH
endif
" }}}

" php.vim syntax override {{{
function! PhpSyntaxOverride()
    hi! def link phpDocTags  phpDefine
    hi! def link phpDocParam phpType
endfunction
augroup phpSyntaxOverride
    autocmd!
    autocmd FileType php call PhpSyntaxOverride()
augroup END
"}}}

" php getter setter both mapping{{{
augroup phpsetter
    autocmd!
    autocmd FileType php nnoremap <buffer> <leader>pb <Plug>PhpgetsetInsertBothGetterSetter
    autocmd FileType php nnoremap <buffer> <leader>ps <Plug>PhpgetsetInsertSetter
    autocmd FileType php nnoremap <buffer> <leader>pg <Plug>PhpgetsetInsertGetter
augroup end
"}}}

" PhpComplete Settings {{{
let g:phpcomplete_parse_docblock_comments=1
let g:phpcomplete_cache_taglists=1
let g:phpcomplete_complete_for_unknown_classes=1
" }}}

" PHP Helper Settings {{{
let g:php_refactor_command='refactor'
let g:tagbar_phpctags_bin='phpctags'
let g:composer_cmd = 'composer'

let g:pdv_template_dir = bundles_dir . "/pdv/templates_snip"
augroup pdv_config
    autocmd!
    autocmd FileType php nnoremap <buffer> <leader>d :call pdv#DocumentWithSnip()<CR>
augroup end

" }}}

" OmniSharp Settings {{{
let g:Omnisharp_start_server = 0
let g:Omnisharp_stop_server  = 0
let g:OmniSharp_host="http://localhost:20001"
let g:ycm_csharp_server_port = 20001
let g:OmniSharp_timeout = 1
let g:OmniSharp_server_type = 'v1'
let g:OmniSharp_server_type = 'roslyn'

let g:OmniSharp_selector_ui = "denite"

" OmniSharp bindings TODO: compare with Eugene's - CS only!
nnoremap <leader>fi :OmniSharpFindImplementations<cr>
nnoremap <leader>ft :OmniSharpFindType<cr>
nnoremap <leader>fs :OmniSharpFindSymbol<cr>
nnoremap <leader>fu :OmniSharpFindUsages<cr>
nnoremap <leader>fm :OmniSharpFindMembersInBuffer<cr>
nnoremap <leader><space> :OmniSharpFindMembersInBuffer<cr>

" cursor can be anywhere on the line containing an issue for this one
nnoremap <leader>x  :OmniSharpFixIssue<cr>
nnoremap <leader>fx :OmniSharpFixUsings<cr>
nnoremap <leader>tt :OmniSharpTypeLookup<cr>
nnoremap <leader>dc :OmniSharpDocumentation<cr>
nnoremap <leader>gd :OmniSharpGotoDefinition<cr>
" }}}

" Read Local PlugSettings {{{
let $LOCALPLUGSETTINGS = expand('~/_local_plug_settings.vim')
if filereadable($LOCALPLUGSETTINGS)
    source $LOCALPLUGSETTINGS
endif 
" }}}

" }}}

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Settings                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" {{{

" Encoding settings {{{
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif
" }}}

" ColorScheme {{{
colorscheme oceanblack
" }}}

" History and undo settings  {{{
set backup
set writebackup
set backupdir =$temp
if has('unix')
    set backupdir =~/.backup/
    execute "silent !mkdir -p " . EscapePath(expand("~/.backup"))
endif
set undofile
set undodir =$temp
if has('unix')
    set undodir =~/.undo/
    execute "silent !mkdir -p " . EscapePath(expand("~/.undo"))
endif
set history =1000         " remember more commands and search history
set undolevels =1000      " use many muchos levels of undo
" }}}

" FileType and Syntax Settings {{{
filetype on
syntax on
filetype plugin indent on
if has("win32")
    behave mswin
endif
" }}}

" Editing Options {{{

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start
set whichwrap+=<,>,[,]
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif
" }}}

" Default options for indenting {{{
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set textwidth=78
set autoindent
set shiftround
" }}}

" Default options for folding {{{
set foldenable
set foldmethod=syntax
set foldlevel=100       " Unfold on start
set foldopen=block,hor,mark,percent,quickfix,tag
set foldlevelstart=99
" }}}

" Behaviour Settings {{{
set visualbell
if has('virtualedit')
    set virtualedit=all
endif
set hidden
" }}}

" Search Settings {{{
set hlsearch     " Highlight search results
set ignorecase   " no sensitive to case
set incsearch    " enable incremental search
set smartcase    " When meet uppercase -> sensitive
" }}}

" Some display settings {{{
set ruler               " show the cursor position all the time
set nowrap              " Dont wrap from screen end
set nonumber            " show display settings
set showcmd             " display incomplete commands
set list                " visualizing tabs, spaces, trails etc.
set listchars=tab:>.,trail:.,extends:#,nbsp:.,precedes:%
set laststatus=2
set noshowmode     " Mode is in airline, no need stock one
set ttyfast        " Term is fast
set formatoptions-=t " Don't wrap while typing
set viewoptions=cursor,options,folds,slash,unix

" Setting gui options and fonts {{{
colorscheme desert 
set guifont=Consolas:h8:cANSI
set guioptions-=m
set guioptions-=T
set guioptions-=l
set guioptions-=r
set guioptions-=L
set guioptions-=R
set guioptions-=e
set guioptions+=c
if !has("unix")
  set guioptions-=a
endif
if has('gui_running')
    colorscheme desert
    if has('gui_gnome')
        set guifont=Monospace\ 8
    endif
elseif has('win32')
    colorscheme slate
endif
" }}}

" Settings for split and Tabs {{{
set nosplitbelow
set equalalways
set path+=**
set complete-=u,t
set complete+=k
set complete+=kspell
set completeopt=menu,menuone,longest
let g:omnicomplete_fetch_documentation=1
" }}}

" Wild Menu Settings {{{
set wildmenu
set wildmode=full
set wildignore=*.o,*.obj,*~
set wildcharm=<Tab>
" }}}

"Columns and lines{{{
if has('gui_running')
    if has('win32')
        simalt ~x
    else
        simalt <F10>
    endif
else
    augroup nonGuiCommands
        autocmd!
        autocmd InsertLeave,InsertEnter * set cursorline!
    augroup END
endif
"}}}

" {{{ nvim specific settings
if has('nvim') || version >= 800
    :tnoremap <Esc><Esc> <C-\><C-n>
    :tnoremap <C-k> <C-\><C-n><C-w>k
    :tnoremap <C-l> <C-\><C-n><C-w>l
    :tnoremap <C-h> <C-\><C-n><C-w>h
    :tnoremap <C-j> <C-\><C-n><C-w>j
    :tnoremap <C-w> <C-\><C-n><C-w>
    if !has('nvim')
        set termwinkey=<M-y>
        :tnoremap <M-v> <M-y>"
        :tnoremap <C-b> <M-y>"*
        :tnoremap <C-v> <M-y>""
    endif
    augroup terminalau
        autocmd!
        if !has('nvim')
            "autocmd BufEnter *[Terminal] :nmap <buffer> <M-v> i<M-v>
            "autocmd BufEnter *[Terminal] :nmap <buffer> <C-b> i<C-b>
            "autocmd BufEnter *[Terminal] :nmap <buffer> <C-v> i<C-v>
            "autocmd BufEnter *[Terminal] :nmap <buffer> p i<C-v>
            "autocmd BufEnter *[Terminal] :nmap <buffer> "*p i<C-b>
            "autocmd BufEnter *[Terminal] :nmap <buffer> P i<M-v>
        endif
    augroup end
endif
" }}}

" }}}

" Modeline {{{
set modeline
set modelines=5
" }}}

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       Auto Commands and Commands                       "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" {{{

" Commands {{{
command! -nargs=+ FixIndent call IndentationFixer(<f-args>)
" }}}

" Custom AutoCommands {{{
augroup lang_settings
    autocmd!
    autocmd FileType python :call Set_Python_Settings()
    autocmd FileType html :call Set_ML_Settings()
    autocmd FileType javascript :call Set_JS_Settings()
    autocmd BufEnter,BufRead *.{mel,ma} :call Set_Mel_Settings()
    autocmd FileType vim :call Set_Vim_Settings()
    autocmd FileType yaml :call Set_YAML_Settings()
augroup END
augroup vimrcEx
    autocmd!
    autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END
" }}}

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Mappings                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" {{{

" Don't use Ex mode, use Q for formatting
noremap Q gq

" Edit and source my vimrc file
nnoremap <leader>ev :rightbelow vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" when wrapping is enabled do wrap friendly scrolling
nnoremap j gj
nnoremap k gk

" Maps for switching windows 
noremap <c-j> <c-w>j
noremap <c-h> <c-w>h
noremap <c-k> <c-w>k
noremap <c-l> <c-w>l

" Map for refreshing all open buffers
nnoremap <leader>rb :call RefreshAllBuffers()<cr>

" move visual block up/down one
vmap <c-j> "td"tp'[V']
vmap <c-k> "tdk"tP'[V']

" move a line up or down
nnoremap - "tdd"tp
nnoremap _ "tddk"tP

" move stuff to the right of cursor to next line
nmap <silent> <leader><CR> i<CR><ESC>k$

" Maps for switching buffers
nnoremap <M-j> :bn<Enter>
nnoremap <M-k> :bp<Enter>

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" from mswin.vim {{{
" backspace in Visual mode deletes selection
vnoremap <BS> d

" CTRL-X and SHIFT-Del are Cut
vnoremap <C-X> "+x
vnoremap <S-Del> "+x

" CTRL-C and CTRL-Insert are Copy
vnoremap <C-C> "+y
vnoremap <C-Insert> "+y

" CTRL-V and SHIFT-Insert are Paste
map <C-V>               "+gP
map <S-Insert>          "+gP

cmap <C-V>      <C-R>+
cmap <S-Insert>     <C-R>+

" Pasting blockwise and linewise selections is not possible in Insert and
" Visual mode without the +virtualedit feature.  They are pasted as if they
" were characterwise instead.
" Uses the paste.vim autoload script.
" Use CTRL-G u to have CTRL-Z only undo the paste.

exe 'inoremap <script> <C-V> <C-G>u' . paste#paste_cmd['i']
exe 'vnoremap <script> <C-V> ' . paste#paste_cmd['v']

imap <S-Insert>     <C-V>
vmap <S-Insert>     <C-V>

" Use CTRL-Q to do what CTRL-V used to do
noremap <C-Q>       <C-V>

" Use CTRL-S for saving, also in Insert mode
noremap <C-S>       :update<CR>
vnoremap <C-S>      <C-C>:update<CR>
inoremap <C-S>      <C-O>:update<CR>

" Alt-Space is System menu
if has('gui_running')
  noremap <M-Space> :simalt ~<CR>
  inoremap <M-Space> <C-O>:simalt ~<CR>
  cnoremap <M-Space> <C-C>:simalt ~<CR>
endif

" CTRL-Tab is Next window
noremap <C-Tab> <C-W>w
inoremap <C-Tab> <C-O><C-W>w
cnoremap <C-Tab> <C-C><C-W>w
onoremap <C-Tab> <C-C><C-W>w

" CTRL-F4 is Close window
noremap <C-F4> <C-W>c
inoremap <C-F4> <C-O><C-W>c
cnoremap <C-F4> <C-C><C-W>c
onoremap <C-F4> <C-C><C-W>c
" }}}

" Meta-A is Select all
noremap <M-a> gggH<C-O>G
inoremap <M-a> <C-O>gg<C-O>gH<C-O>G
cnoremap <M-a> <C-C>gggH<C-O>G
onoremap <M-a> <C-C>gggH<C-O>G
snoremap <M-a> <C-C>gggH<C-O>G
xnoremap <M-a> <C-C>ggVG

" Indentation changes, but visual stays
vnoremap > ><CR>gv
vnoremap < <<CR>gv

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           Customization Hook                            "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Read Local Settings {{{
let $LOCALVIM = expand('~/_local.vim')
if filereadable($LOCALVIM)
    source $LOCALVIM
endif
" }}}

" vim: fdm=marker
